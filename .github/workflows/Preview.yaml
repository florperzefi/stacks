name: Preview Json Output
on:
  #  push:
  #    branches:
  #      - main
  #    paths:
  #      - 'dev/**'
  #      - 'dev/platform/**'
  #      - 'dev/foundation/**'
  workflow_dispatch:
jobs:
  clients-refresh-preview:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
    outputs:
      has_changes: ${{ steps.check_changes.outputs.has_changes }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Pulumi
        uses: pulumi/actions@v5

      - name: gcloud authentication
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.GCP_WORKLOAD_IDENTITY_PROVIDER_DEV }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT_DEV }}

      - name: Install gcloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          install_components: 'gke-gcloud-auth-plugin'

      - name: NPM install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd ./dev
          npm install

#      - name: Pulumi Preview
#        id: preview
#        uses: pulumi/actions@v5
#        with:
#          command: preview
#          refresh: 'false'
#          stack-name: clients-dev
#          work-dir: dev/clients
#          diff: true
#        env:
#          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
#          USE_GKE_GCLOUD_AUTH_PLUGIN: True


      - name: Pulumi Preview (Save Plan)
        id: preview
        run: |
          pulumi login --non-interactive
          mkdir -p pulumi-plans
          cd dev/clients
          pulumi preview \
            --stack perzefi/clients-dev \
            --save-plan ../../pulumi-plans/clients-update.json \
            --non-interactive > ../../preview-output.txt 2>&1
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          USE_GKE_GCLOUD_AUTH_PLUGIN: true

      - name: Check Pulumi Changes
        id: check_changes
        run: |

          CHANGES=$(grep -E "to create|to delete|to update|to replace" preview-output.txt || true)
          
          if [ -n "$CHANGES" ]; then
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          
            # Use multiline syntax for changes_summary to handle newlines properly
            echo "changes_summary<<EOF" >> "$GITHUB_OUTPUT"
            echo "$CHANGES" >> "$GITHUB_OUTPUT"
            echo "EOF" >> "$GITHUB_OUTPUT"
          
            # For the notice, replace newlines with spaces to avoid formatting issues
            CHANGES_SINGLE_LINE=$(echo "$CHANGES" | tr '\n' ' ')
            echo "::notice title=Pulumi Change Detected in CLIENTS Stack::$CHANGES_SINGLE_LINE"
          else
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
            echo "changes_summary=No changes detected" >> "$GITHUB_OUTPUT"
            echo "::notice title=No Pulumi Changes in CLIENTS Stack::No changes detected"
          fi
      

      # Save and Exports pulumi Preview output for audit, helps to double-check changes before "pulumi up".
      - name: Save Preview Output
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          mkdir -p preview-outputs
          echo "${{ steps.preview.outputs.output }}" >> pulumi-plans/preview-output.txt

      - name: Upload Preview Artifact
#        if: steps.check_changes.outputs.has_changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: clients-preview-output
          path: pulumi-plans/
          retention-days: 30
  # Clients deploy runs only if there are changes on pulumi preview in clients-refresh-preview job
  clients-deploy:
    runs-on: ubuntu-latest
    needs: clients-refresh-preview
    if: needs.clients-refresh-preview.outputs.has_changes == 'true'
    permissions:
      contents: read
      id-token: write
      packages: write
    environment:
      # This step will trigger the Manual Approval, only if there are changes in pulumi preview, if not then it will be skipped.
      name: dev
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Pulumi
        uses: pulumi/actions@v5

      - name: gcloud authentication
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.GCP_WORKLOAD_IDENTITY_PROVIDER_DEV }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT_DEV }}

      - name: Install gcloud
        uses: google-github-actions/setup-gcloud@v1

      - name: NPM install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd ./dev
          npm install

      - name: Download Preview State
        uses: actions/download-artifact@v4
        with:
          name: pulumi-preview-state
          path: preview-outputs/

      - name: Pulumi Up
        id: deploy
        uses: pulumi/actions@v5
        with:
          command: up
          stack-name: clients-dev
          diff: true
          work-dir: dev/clients
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          USE_GKE_GCLOUD_AUTH_PLUGIN: True

#
#
#      # Security and Audit: Save deployment output
#      - name: Save Deployment Output
#        run: |
#          mkdir -p deployment-outputs
#          echo "Deployment completed at: $(date)" > deployment-outputs/clients-deploy.txt
#          echo "Commit: ${{ github.sha }}" >> deployment-outputs/clients-deploy.txt
#          echo "Deployed by: ${{ github.actor }}" >> deployment-outputs/clients-deploy.txt
#          echo "---" >> deployment-outputs/clients-deploy.txt
#          echo "${{ steps.deploy.outputs.output }}" >> deployment-outputs/clients-deploy.txt
#
#
#      - name: Upload Deployment Artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: clients-deployment-output
#          path: deployment-outputs/
#          retention-days: 90
