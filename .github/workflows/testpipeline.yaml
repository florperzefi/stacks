name: Directory CI/CD Pipeline / No Pulumi

on:
#  push:
#    branches:
#      - main
#    paths:
#      - 'dev/clients/**'
#      - 'dev/platform/**'
#      - 'dev/foundation/**'
  workflow_dispatch:


jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      only_foundation: ${{ steps.set.outputs.only_foundation }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect exclusive foundation changes
        id: set
        run: |
          git fetch origin main
          DIFF=$(git diff --name-only origin/main...HEAD)

          echo "Changed files:"
          echo "$DIFF"

          changed_clients=false
          changed_platform=false
          changed_foundation=false

          if echo "$DIFF" | grep -q '^clients/'; then
            changed_clients=true
          fi

          if echo "$DIFF" | grep -q '^platform/'; then
            changed_platform=true
          fi

          if echo "$DIFF" | grep -q '^foundation/'; then
            changed_foundation=true
          fi

          if [[ "$changed_foundation" == "true" && "$changed_clients" == "false" && "$changed_platform" == "false" ]]; then
            echo "Only foundation files changed"
            echo "only_foundation=true" >> $GITHUB_OUTPUT
          else
            echo "Other directories also changed or no foundation change"
            echo "only_foundation=false" >> $GITHUB_OUTPUT
          fi
  

  clients-refresh-preview:
    runs-on: ubuntu-latest
    outputs:
      preview_status: ${{ steps.preview-step.outputs.status }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build project
        id: preview-step
        run: |
          echo "Client refresh"
          echo "status=success" >> $GITHUB_OUTPUT
  

  clients-deploy:
    runs-on: ubuntu-latest
    needs: clients-refresh-preview
    environment:
      name: dev
      url: ${{ steps.deploy.outputs.url }}
    # Check if previews job is successful, AND  has a match changes
    if: |
      needs.clients-refresh-preview.result == 'success' && 
      needs.clients-refresh-preview.outputs.preview_status == 'success'
      

    steps:
      - name: Run tests
        run: echo "✅ Running unit tests..."




#FOUNDATION
  foundation-refresh-preview:
    runs-on: ubuntu-latest
    needs: [clients-refresh-preview, clients-deploy]
    if: ${{ (success() || needs.clients-deploy.result == 'skipped') && !contains(needs.*.result, 'failure') }}

    outputs:
      preview_status: ${{ steps.preview-step.outputs.status }}
    steps:
      - name: Lint code
        id: preview-step
        run: |
          echo "🧹 Linting source files..."
          echo "status=success" >> $GITHUB_OUTPUT


  foundation-deploy:
    runs-on: ubuntu-latest
    needs: [clients-refresh-preview, clients-deploy, foundation-refresh-preview]
    environment:
      name: dev
      url: ${{ steps.deploy.outputs.url }}
    if: |
      !contains(needs.*.result, 'failure') &&
      needs.foundation-refresh-preview.outputs.preview_status == 'success'
    steps:
      - name: Run security scan
        run: echo "🔐 Running security scan..."





  platform-refresh-preview:
    runs-on: ubuntu-latest
    needs: [clients-refresh-preview, clients-deploy, foundation-refresh-preview, foundation-deploy]
    if: ${{ (success() || needs.foundation-deploy.result == 'skipped') && !contains(needs.*.result, 'failure') }}
    outputs:
      preview_status: ${{ steps.preview-step.outputs.status }}
    steps:
      - name: Deploy to staging
        id: preview-step
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "status=success" >> $GITHUB_OUTPUT
  

  platform-deploy:
    runs-on: ubuntu-latest
    needs: [ clients-refresh-preview, clients-deploy, foundation-refresh-preview, foundation-deploy, platform-refresh-preview ]
    environment:
      name: dev
      url: ${{ steps.deploy.outputs.url }}
    if: |
      !contains(needs.*.result, 'failure') &&
      needs.platform-refresh-preview.outputs.preview_status == 'success'
    steps:
      - name: Send Slack notification
        run: echo "📣 Notifying team of successful deployment..."